{"version":3,"sources":["components/NavBar.jsx","components/Bar.jsx","algorithms/swap.js","algorithms/insertionSort.js","algorithms/mergeSort.js","algorithms/selectionSort.js","algorithms/bubbleSort.js","algorithms/quickSort.js","animation/animateComparisons.js","animation/animateMove.js","animation/animateNormal.js","animation/animateSorted.js","animation/animateSelectionSort.js","animation/animateBubbleSort.js","animation/calculateNewPosition.js","animation/animateInsertionSort.js","animation/animateMergeSort.js","animation/animateQuickSort.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","this","props","algoChosen","sortingActivated","generateList","handleSliderMousedown","handleAlgoDropdown","sort","handleArrayOrder","handleArraySize","compareMode","handleCompareMode","activateBtnColor","activateBtnText","compareBtnColor","isCompareMode","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","map","order","index","key","onClick","size","algo","style","color","min","max","onMouseDown","Component","Bar","value","row","vwWidth","windowWidth","Math","document","documentElement","clientWidth","window","innerWidth","barHeight","barWidth","pxWidth","floor","transform","height","width","backgroundColor","swap","list","index1","index2","tmp","insertionSort","newList","_","cloneDeep","comparisons","swaps","sorted","i","length","j","push","mergeSort","divisions","mergeSort_aux","first","last","mid","merge","leftIndex","leftLast","rightIndex","rightLast","group1","group2","val","selectionSort","bubbleSort","quickSort","small","large","normal","pivots","quickSort_aux","pivotPos","partition","pivot","lbad","rbad","animateComparisons","bar1","bar2","color1","animateMove","positions","speed","transitionSpeed","transition","animateNormal","animateSorted","bar","animateSelectionSort","bars","iteration","setTimeout","newPositions","calculateNewPosition","animateBubbleSort","console","log","indices","barsOffset","animateInsertionSort","animateMergeSort","paintGroup","paintNormal","forEach","division","animateQuickSort","paintSmall","paintLarge","DEFAULT_COLOR","SortingAlgoVisualizer","componentDidMount","state","setState","prevStates","lists","Array","keys","random","arrayOrder","a","b","x","arr","addEventListener","handleSliderMouseup","slider","getElementById","setTransitionSpeed","removeEventListener","resetBars","from","setList","item","oldList","getElementsByClassName","sliderValue","result","algoName","action","animateSort","Fragment","border","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.046e43f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n \n  render() {\n    const orders = [\"Random\", \"Worst Case\"];\n    const algo = [\n      \"Insertion Sort\",\n      \"Selection Sort\",\n      \"Bubble Sort\",\n      \"Merge Sort\",\n      \"Quick Sort\",\n    ];\n    const sizes = [40, 80, 120, 160];\n\n    const {algoChosen, sortingActivated, generateList, handleSliderMousedown, handleAlgoDropdown, sort, handleArrayOrder, handleArraySize, compareMode, handleCompareMode } = this.props;\n\n    const activateBtnColor =\n      !compareMode && (algoChosen === \"\")\n        ? \"disabled \"\n        : sortingActivated\n        ? \"btn-danger\"\n        : \"btn-success\";\n    const activateBtnText =\n      !compareMode && (algoChosen === \"\")\n        ? \"Choose An Algorithm\"\n        : sortingActivated\n        ? \"Sorting\"\n        : compareMode \n        ? \"Sort\"\n        : \"Activate \" + algoChosen;\n    \n    const compareBtnColor = !compareMode ? \"btn-danger\" : \"btn-success\"\n    const isCompareMode = !compareMode ? \"Ludicrous Mode OFF\" : \"Ludicrous Mode ON\";\n\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Sorting Algo Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n          <li className=\"nav-item dropdown\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Array Order\n              </button>\n              <div\n                className=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                {orders.map((order, index) => {\n                  return(<button className=\"dropdown-item\" key={index} onClick={()=> handleArrayOrder(order)}>\n                    {order}\n                  </button>);\n                })}\n              </div>\n            </li>\n\n            <li className=\"nav-item dropdown\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Size\n              </button>\n              <div\n                className=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                {sizes.map((size, index) => {\n                  return(<button className=\"dropdown-item\" key={index} onClick={()=> handleArraySize(size)}>\n                    {size}\n                  </button>);\n                })}\n              </div>\n            </li>\n\n            <li className=\"nav-item\">\n              <button className=\"btn btn-dark\" onClick={() => generateList()}>\n                Generate Array\n              </button>\n            </li>\n            \n            <li className=\"nav-item dropdown\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithms\n              </button>\n              <div\n                className=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                {algo.map((algo, index) => (\n                  <button className=\"dropdown-item\" key={index} onClick={() => handleAlgoDropdown(algo)}>\n                    {algo}\n                  </button>\n                ))}\n              </div>\n            </li>\n            <li>\n              <span className=\"speed-label\" style={{color: \"white\"}}>Speed</span>\n              <input className= \"speed-slider\" type=\"range\" id=\"customRange1\" min=\"1\" max=\"100\" onMouseDown={() => handleSliderMousedown()}/>             \n            </li>\n\n            <li className=\"nav-item\">\n              <button\n                className={`btn ${compareBtnColor}`}\n                type=\"button\"\n                onClick={() => handleCompareMode()}\n              >\n                <strong>{isCompareMode}</strong>\n              </button>\n            </li>\n\n            <li className=\"nav-item\">\n              <button\n                className={`btn ${activateBtnColor}`}\n                type=\"button\"\n                onClick={() => sort()}\n              >\n                <strong>{activateBtnText}</strong>\n              </button>\n            </li>\n            \n                      \n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\n\nconst Bar = (props) => {\n  const {value, id, size, compareMode, row} = props;\n  const vwWidth = size === 40 ? 1 : size === 80 ? 0.5 : size === 120 ? 0.3 : size === 160 ? 0.25 : 2;\n  const windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n  const barHeight = compareMode ? value/5 : value/1.5\n  const barWidth = compareMode ? vwWidth/2 : vwWidth\n  const pxWidth = Math.floor((barWidth/100) * windowWidth + 3);\n  const barsOffset = compareMode ? Math.floor(((windowWidth/2) - (size*pxWidth)) / 2) : Math.floor((windowWidth - (size*pxWidth)) / 2);\n  const transform = \"translateX(\" + (barsOffset + id*pxWidth) + \"px)\";\n\n  return(\n    <div className={`bar bar${row}`}  id = {id} style={{height: `${barHeight}vh`, width: `${barWidth}vw`, transform: `${transform}`, backgroundColor: \"aqua\"}}></div>\n  );\n}\n\nexport default Bar;","const swap = (list, index1, index2) => {\n  let tmp = list[index1];\n  list[index1] = list[index2];\n  list[index2] = tmp;\n}\n\nexport default swap;","import swap from \"./swap\";\nimport _ from \"lodash\";\n\nconst insertionSort = list => {\n  const newList = _.cloneDeep(list);\n  const comparisons = [[]];\n  const swaps = [[]];\n  const sorted = [[newList[0][1]]];\n  for (let i = 1; i < newList.length; i++) {\n    \n    for (let j = i - 1; j >= 0; j--) {\n      if (newList[j][0] > newList[j + 1][0]) {\n        comparisons.push([[newList[j][1]], newList[j + 1][1]]);\n        swaps.push([[newList[j][1]], newList[j + 1][1], j, j + 1]);\n        if (j === 0) sorted.push([newList[j + 1][1]]);\n        else sorted.push([]);\n        swap(newList, j, j + 1);\n      } else {\n        comparisons.push([[newList[j][1]], newList[j + 1][1]]);\n        swaps.push([]);\n        sorted.push([newList[j + 1][1]]);\n        break;\n      }\n    }\n  }\n  return [newList, comparisons, swaps, sorted];\n};\n\nexport { insertionSort };\n","import swap from \"./swap\";\nimport _ from \"lodash\";\n\nconst mergeSort = (list) => {\n  const newList = _.cloneDeep(list);\n  const comparisons = [], swaps = [], sorted = [], divisions = [];\n  mergeSort_aux(newList, 0, newList.length - 1, comparisons, swaps, sorted, divisions);\n  return [newList, comparisons, swaps, sorted, divisions];\n}\n\nconst mergeSort_aux = (list, first, last, comparisons, swaps, sorted, divisions) => {\n  if(first < last){\n    let mid = Math.floor((first + last)/2);\n\n    mergeSort_aux(list, first, mid,  comparisons, swaps, sorted, divisions);\n\n    mergeSort_aux(list, mid + 1, last, comparisons, swaps, sorted, divisions); \n\n    merge(list, first, last, comparisons, swaps, sorted, divisions);\n  }\n}\n\nconst merge = (list, first, last, comparisons, swaps, sorted, divisions) => {\n  let leftIndex = first;\n  let leftLast = Math.floor((first + last)/2);\n  let rightIndex = leftLast + 1;\n  let rightLast = last;\n\n  //color group\n  const group1 = [];\n  const group2 = [];\n  for(let i = first; i <= last; i++){\n    if (i <= leftLast)  group1.push(list[i][1]);\n    else  group2.push(list[i][1]);\n    \n  }\n  divisions.push([group1, group2]);\n  comparisons.push([]);\n  swaps.push([]);\n  sorted.push([])\n\n  while (leftIndex <= leftLast && rightIndex <= rightLast){\n    comparisons.push([list[leftIndex][1], list[rightIndex][1]]);\n    swaps.push([]);\n    divisions.push([]);\n\n    if (list[leftIndex][0] <= list[rightIndex][0]) { \n      sorted.push([list[leftIndex][1]]);\n      leftIndex += 1;\n    }\n    else{\n      const val = list[rightIndex];\n      let index = rightIndex;\n       \n      while(index !== leftIndex){\n        swaps[swaps.length - 1].push([list[index -1][1], list[index][1], index -1, index]);\n        list[index] = list[index-1];\n        index -= 1;\n      }\n\n      swaps[swaps.length - 1].push([val[1], list[leftIndex][1], rightIndex, leftIndex]);\n      list[leftIndex] = val;\n      sorted.push([list[leftIndex][1]]);\n      leftIndex += 1;\n      rightIndex += 1;\n      leftLast += 1;\n    }\n    \n  }\n  //color sorted\n  while(leftIndex <= leftLast){\n    divisions.push([]);\n    comparisons.push([]);\n    swaps.push([]);\n    sorted.push([list[leftIndex][1]]);\n    leftIndex++;\n  }\n  while (rightIndex <= rightLast) {\n    divisions.push([]);\n    comparisons.push([]);\n    swaps.push([]);\n    sorted.push([list[rightIndex][1]]);\n    rightIndex++;\n  }\n}\n\nexport {mergeSort};","import swap from './swap';\nimport _ from \"lodash\";\n\nconst selectionSort = (list) => {\n  const newList = _.cloneDeep(list);\n  const comparisons = [], swaps = [], sorted = [];\n\n  for (let i = 0; i < newList.length - 1; i++){\n    let min = i;\n    for (let j = i+1; j < newList.length; j++){\n      comparisons.push([newList[min][1], newList[j][1]]);\n      swaps.push([]);\n      sorted.push([]);\n      if (newList[j][0] < newList[min][0]) min = j;\n    }\n    if(min !== i){\n      swaps[swaps.length - 1] = [newList[min][1], newList[i][1], min, i];\n      swap(newList, min, i);\n    }\n    \n    sorted[sorted.length -1] = [newList[i][1]];\n  }\n  comparisons.push([]);\n  swaps.push([]);\n  sorted.push([newList[newList.length -1][1]]);\n  return [newList, comparisons, swaps, sorted];\n}\n\nexport {selectionSort}","import swap from './swap';\nimport _ from \"lodash\";\n\nconst bubbleSort = (list) => {\n  const newList = _.cloneDeep(list);\n  const comparisons = [];\n  const swaps = [];\n  let sorted = [];\n  let swapped = false;\n  for (let i = 0; i < newList.length; i++){\n    for (let j = 0; j < newList.length - i -1; j++){\n      comparisons.push([newList[j][1], newList[j+1][1]]);\n      swaps.push([]);\n      sorted.push([]);\n      if (newList[j][0] > newList[j+1][0]) {\n        swaps[swaps.length -1] = [newList[j][1], newList[j+1][1], j, j+1];\n        swap(newList, j, j+1);\n        swapped = true; \n      }\n    }\n    sorted[sorted.length -1] = [newList[newList.length - i -1][1]];\n  }\n  comparisons.push([]);\n  swaps.push([]);\n  sorted.push([newList[1][1]]);\n  return [newList, comparisons, swaps, sorted];\n}\n\nexport {bubbleSort}","import swap from './swap';\nimport _ from \"lodash\";\n\nconst quickSort = (list) => {\n  const newList = _.cloneDeep(list);\n  const swaps = [], sorted = [], small = [], large = [], normal = [], pivots = []; \n  quickSort_aux(newList, 0, list.length -1, swaps, sorted, small, large, normal, pivots);\n  return [newList, swaps, sorted, small, large, normal, pivots];\n}\n\nconst quickSort_aux = (list, first, last, swaps, sorted, small, large, normal, pivots) => {\n  if (last - first >= 1){\n    const pivotPos = partition(list, first, last, swaps, sorted, small, large, normal, pivots);\n    quickSort_aux(list, first, pivotPos - 1, swaps, sorted, small, large, normal, pivots);\n    quickSort_aux(list, pivotPos + 1, last, swaps, sorted, small, large, normal, pivots);\n  }\n  else if (last - first  === 0) {\n    swaps.push([]);\n    sorted.push([list[first][1]]);\n    small.push([]);\n    large.push([]);\n    normal.push([]);\n    pivots.push([]);\n  }\n}\n\nconst partition = (list, first, last, swaps, sorted, small, large, normal, pivots) => {\n  const pivot = list[first][0];\n  let lbad = first + 1;\n  let rbad = last;\n\n  swaps.push([]);\n  sorted.push([]);\n  small.push([]);\n  large.push([]);\n  normal.push([]);\n  pivots.push([list[first][1]]);\n\n\n  while (lbad <= rbad) {\n    while (lbad <= rbad && list[lbad][0] < pivot) {\n      swaps.push([]);\n      sorted.push([]);\n      small.push([list[lbad][1]]);\n      large.push([]);\n      normal.push([]);\n      pivots.push([]);\n      lbad += 1;\n    }\n    while (lbad <= rbad && list[rbad][0] >= pivot) {\n      swaps.push([]);\n      sorted.push([]);\n      small.push([]);\n      large.push([list[rbad][1]]);\n      normal.push([]);\n      pivots.push([]);\n      rbad -= 1;\n    }\n\n    if (lbad <= rbad) {\n      swaps.push([list[lbad][1], list[rbad][1], lbad, rbad]);\n      sorted.push([]);\n      small.push([list[rbad][1]]);\n      large.push([list[lbad][1]]);\n      normal.push([]);\n      pivots.push([]);\n      swap(list, lbad, rbad);\n      lbad += 1;\n      rbad -= 1;\n    };\n  }\n\n  swaps.push([list[first][1], list[rbad][1], first, rbad]);\n  sorted.push([list[first][1]]);\n  small.push([]);\n  large.push([]);\n  pivots.push([]);\n  swap(list, first, rbad);\n  const tmp = [];\n  for(let i = first; i <= last; i++){\n    if (i !== rbad) tmp.push(list[i][1]);\n  }\n  normal.push(tmp);\n  return rbad;\n}\n\nexport {quickSort};","export const animateComparisons = (algo, bar1, bar2) => {\n  let color1 = \"red\";\n  let color2 = \"red\";\n\n  if (algo === \"Selection Sort\" || algo === \"Quick Sort\") color1 = \"yellow\";\n  if (bar1 !== null) bar1.style.backgroundColor = color1;\n  bar2.style.backgroundColor = color2; \n  \n}\n\n\n\n\n","export const animateMove = (positions, bar1, bar2, speed) => { \n  const transitionSpeed = 7 * speed/100;\n  bar1.style.transform = \"translateX(\" + positions[1] + \"px)\";\n  bar1.style.transition = \"transform \" + transitionSpeed + \"ms\";\n  if (bar2 !== null){\n    bar2.style.transform = \"translateX(\" + positions[0] + \"px)\";\n    bar2.style.transition = \"transform \" + transitionSpeed + \"ms\";\n  }\n}\n\n","export const animateNormal = (bar1, bar2) => {\n  let color = \"aqua\";\n\n  bar1.style.backgroundColor = color;\n  if (bar2 !== null)  bar2.style.backgroundColor = color; \n}","export const animateSorted = (bar) => {\n  const color = \"rgb(85,255,51)\";\n  bar.style.backgroundColor = color;\n};\n","import {animateComparisons, animateMove, animateNormal, animateSorted, calculateNewPosition} from \"./index\"\n\n\nexport const animateSelectionSort = (bars, algo, compareMode, comparisons, swaps, sorted, speed, size) => {\n  let iteration;\n  for (let i = 0; i < comparisons.length; i++) {\n    iteration = i;\n    setTimeout(() => {\n      if (comparisons[i].length !== 0) \n        {\n          animateComparisons(\n            algo,\n            bars[comparisons[i][0]],\n            bars[comparisons[i][1]]\n          );\n          setTimeout(() => {\n            animateNormal(bars[comparisons[i][0]], bars[comparisons[i][1]]); \n          }, 7 * speed/10);         \n        }\n\n      if (swaps[i].length !== 0) {\n          const newPositions = calculateNewPosition(swaps[i], size, compareMode);\n          setTimeout(() => {\n            animateMove(newPositions, bars[swaps[i][0]], bars[swaps[i][1]], speed);\n          }, 2 * speed/10)\n      }\n\n      if (sorted[i].length !== 0) {\n        setTimeout(() => {\n          animateSorted(bars[sorted[i][0]]);\n        }, 8 * speed/10);\n\n      }\n    }, speed * i);\n  }\n\n  return iteration + 1;\n}","import {animateComparisons, animateMove, animateNormal, animateSorted, calculateNewPosition} from \"./index\"\n\n\nexport const animateBubbleSort = (bars, algo, compareMode, comparisons, swaps, sorted, speed, size) => {\n  let iteration;\n  console.log(sorted);\n\n  for (let i = 0; i < comparisons.length; i++) {\n    iteration = i;\n    setTimeout(() => {\n      if (comparisons[i].length !== 0) \n        {\n          animateComparisons(\n            algo,\n            bars[comparisons[i][0]],\n            bars[comparisons[i][1]]\n          );\n          setTimeout(() => {\n            animateNormal(bars[comparisons[i][0]], bars[comparisons[i][1]]); \n          }, 6 * speed/10);         \n        }\n\n      if (swaps[i].length !== 0) {\n          const newPositions = calculateNewPosition(swaps[i], size, compareMode);\n          setTimeout(() => {\n            animateMove(newPositions, bars[swaps[i][0]], bars[swaps[i][1]], speed);\n          }, 2 * speed/10)\n      }\n\n      if (sorted[i].length !== 0) {\n        setTimeout(() => {\n          animateSorted(bars[sorted[i][0]]);\n        }, 8 * speed/10);\n\n      }\n    }, speed * i);\n  }\n\n  return iteration + 1;\n}","export const calculateNewPosition =  (indices, size, compareMode) => {\n  \n  const vwWidth = size === 40 ? 1 : size === 80 ? 0.5 : size === 120 ? 0.3 : size === 160 ? 0.25 : 2;\n  const windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n  const barWidth = compareMode ? vwWidth/2 : vwWidth\n  const pxWidth = Math.floor((barWidth/100) * windowWidth + 3);\n  const barsOffset = compareMode ? Math.floor(((windowWidth/2) - (size*pxWidth)) / 2) : Math.floor((windowWidth - (size*pxWidth)) / 2);\n\n  const pos1 = barsOffset + indices[2]*pxWidth;\n  const pos2 = barsOffset + indices[3]*pxWidth;\n\n  return [pos1, pos2];\n\n}","import {animateComparisons, animateMove, animateNormal, animateSorted, calculateNewPosition} from \"./index\"\n\nexport const animateInsertionSort = (bars, algo, compareMode, comparisons, swaps, sorted, speed, size) => {\n  let iteration;\n  for (let i = 0; i < comparisons.length; i++) {\n    iteration = i;\n    setTimeout(() => {\n      if (comparisons[i].length !== 0) \n        {\n          animateComparisons(\n            algo,\n            null,\n            bars[comparisons[i][1]]\n          );\n        }\n\n      if (swaps[i].length !== 0) {\n          const newPositions = calculateNewPosition(swaps[i], size, compareMode);\n          setTimeout(() => {\n            animateMove(newPositions, bars[swaps[i][0]], bars[swaps[i][1]], speed);\n          }, 2 * speed/10)\n      }\n\n      if (sorted[i].length !== 0) {\n        setTimeout(() => {\n          animateSorted(bars[sorted[i][0]]);\n        }, 9 * speed/10);\n\n      }\n    }, speed * i);\n  }\n\n  return iteration + 1;\n}","import {animateComparisons, animateMove, animateNormal, animateSorted, calculateNewPosition} from \"./index\"\n\n\nexport const animateMergeSort = (bars, algo, compareMode, comparisons, swaps, sorted, divisions, speed, size) => {\n  let iteration;\n  \n  for (let i = 0; i < comparisons.length; i++) {\n    iteration = i;\n    setTimeout(() => {\n      if (divisions[i].length !== 0) {\n        paintGroup(divisions[i], bars);\n      }\n\n      if (comparisons[i].length !== 0) \n        {\n          animateComparisons(\n            algo,\n            bars[comparisons[i][0]],\n            bars[comparisons[i][1]]\n          );\n          setTimeout(() => {\n            paintNormal(bars[comparisons[i][0]], bars[comparisons[i][1]]); \n          }, 7 * speed/10);         \n        }\n\n      if (swaps[i].length !== 0) {\n          swaps[i].forEach((swap) => {\n            const newPositions = calculateNewPosition(swap, size, compareMode);\n            setTimeout(() => {\n              animateMove(newPositions, bars[swap[0]], null, speed);\n            }, 2 * speed/10)\n          });\n          \n      }\n\n      if (sorted[i].length !== 0) {\n        setTimeout(() => {\n          animateSorted(bars[sorted[i][0]]);\n        }, 8 * speed/10);\n\n      }\n    }, speed * i);\n  }\n\n  return iteration + 1;\n}\n\nconst paintGroup = (division, bars) => {\n  const color1 = \"yellow\";\n  const color2 = \"black\";\n  division[0].forEach(index => {\n    bars[index].style.backgroundColor = color1;\n  })\n  division[1].forEach(index => {\n    bars[index].style.backgroundColor = color2;\n  })\n}\n\nconst paintNormal = (bar1, bar2) => {\n  const color1 = \"yellow\";\n  const color2 = \"black\"\n\n  bar1.style.backgroundColor = color1;\n  bar2.style.backgroundColor = color2;\n\n}","import {animateComparisons, animateMove, animateNormal, animateSorted, calculateNewPosition} from \"./index\"\n\n\nexport const animateQuickSort = (bars, algo, compareMode, swaps, sorted, small, large, normal, pivots, speed, size) => {\n  let iteration;\n  for (let i = 0; i < swaps.length; i++) {\n    iteration = i;\n    setTimeout(() => {\n      setTimeout(() => {\n        if (pivots[i].length !== 0) {\n          bars[pivots[i][0]].style.backgroundColor = \"yellow\";\n        }\n\n        if (small[i].length !== 0) {\n          paintSmall(bars[small[i][0]]);\n        }\n  \n        if (large[i].length !== 0) {\n          paintLarge(bars[large[i][0]]);\n        }\n      }, speed/10)\n\n      if (swaps[i].length !== 0) {\n          const newPositions = calculateNewPosition(swaps[i], size, compareMode);\n          setTimeout(() => {\n            animateMove(newPositions, bars[swaps[i][0]], bars[swaps[i][1]], speed); \n          }, 2 * speed/10);\n      }\n\n      if (normal[i].length !== 0) {\n        setTimeout(() => {\n          normal[i].forEach(index => {\n            animateNormal(bars[index], null);\n          })\n        }, 8 * speed/10);\n        \n      }\n\n      if (sorted[i].length !== 0) {\n        setTimeout(() => {\n          animateSorted(bars[sorted[i][0]]);\n        }, 8 * speed/10);\n\n      }\n\n    }, speed * i);\n  }\n\n  return iteration + 1;\n}\n\nconst paintSmall = (bar) => {\n  const color = \"blue\";\n  bar.style.backgroundColor = color;\n}\n\nconst paintLarge = (bar) => {\n  const color = \"red\";\n  bar.style.backgroundColor = color;\n}","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Bar from \"./components/Bar\";\nimport {\n  insertionSort,\n  mergeSort,\n  selectionSort,\n  bubbleSort,\n  quickSort\n} from \"./algorithms/index\";\nimport {\n  animateSelectionSort,\n  animateBubbleSort,\n  animateInsertionSort,\n  animateMergeSort,\n  animateQuickSort\n} from \"./animation/index\";\n\nimport _ from \"lodash\";\n\nconst DEFAULT_COLOR = \"aqua\";\n\nclass SortingAlgoVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lists: [],\n      size: 40,\n      speed: 50,\n      algoChosen: \"\",\n      sortingActivated: false,\n      arrayOrder: \"Random\",\n      barsOffset: 0,\n      compareMode: false\n    };\n  }\n\n  componentDidMount = () => {\n    this.generateList();\n  };\n\n  generateList = () => {\n  \n    if (!this.state.sortingActivated) {\n      this.setState(prevStates => {\n        const lists = [];\n        const newList = [...Array(prevStates.size).keys()].map(() =>\n          Math.floor(Math.random() * 95 + 5)\n        );\n        if (prevStates.arrayOrder === \"Worst Case\")\n          newList.sort((a, b) => b - a);\n\n        newList.forEach((x, index, arr) => (arr[index] = [x, index]));\n        lists.push(newList);\n\n        if (prevStates.compareMode) {\n          for (let i = 0; i < 4; i++) {\n            const tmp = _.cloneDeep(newList);\n            lists.push(tmp);\n          }\n        }\n        return { lists };\n      });\n    }\n  };\n\n  handleArrayOrder = order => {\n    if (!this.state.sortingActivated) {\n      this.setState({ arrayOrder: order });\n      this.generateList();\n    }\n  };\n\n  handleArraySize = size => {\n    if (!this.state.sortingActivated) {\n      this.setState({ size });\n      this.generateList();\n    }\n  };\n\n  handleSliderMousedown = () => {\n    document.addEventListener(\"mouseup\", this.handleSliderMouseup);\n  };\n\n  handleSliderMouseup = () => {\n    const slider = document.getElementById(\"customRange1\");\n    this.setTransitionSpeed(slider.value);\n    document.removeEventListener(\"mouseup\", this.handleSliderMouseup);\n  };\n\n  handleAlgoDropdown = algo => {\n    this.setState({ algoChosen: algo });\n  };\n\n  handleCompareMode = () => {\n    if (!this.state.sortingActivated) {\n      const compareMode = !this.state.compareMode;\n      this.setState({ compareMode });\n      this.generateList();\n    }\n  };\n\n  resetBars = (bars) => {\n    const size = this.state.size;\n    const vwWidth = size === 40 ? 1 : size === 80 ? 0.5 : size === 120 ? 0.3 : size === 160 ? 0.25 : 2;\n    const windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    const barWidth = this.state.compareMode ? vwWidth/2 : vwWidth\n    const pxWidth = Math.floor((barWidth/100) * windowWidth + 3);\n    const barsOffset = this.state.compareMode ? Math.floor(((windowWidth/2) - (size*pxWidth)) / 2) : Math.floor((windowWidth - (size*pxWidth)) / 2);\n\n    Array.from(bars).forEach((bar, index) => {\n      bar.style.transition = \"\";\n      bar.style.transform =\n        \"translateX(\" + (barsOffset + index * pxWidth) + \"px)\";\n    });\n\n    Array.from(bars).forEach(bar => {\n      bar.style.backgroundColor = DEFAULT_COLOR;\n    });\n  };\n\n  setList = (list) => {\n    this.setState(prevStates => {\n      \n      list.forEach((item, index) => {\n        item[1] = index;\n      });\n\n      const lists = _.cloneDeep(prevStates.lists);\n      lists.forEach((oldList, index) => {\n        const newList = _.cloneDeep(list);\n        lists[index] = newList;\n        const bars = document.getElementsByClassName(\"bar\" + index);\n        this.resetBars(bars);\n      })\n\n      return {lists};\n    });\n  };\n\n  setTransitionSpeed = sliderValue => {\n    const result = Math.floor(1200 / sliderValue);\n    this.setState({ speed: result });\n  };\n\n  sort = () => {\n    if (!this.state.sortingActivated && (this.state.algoChosen !== \"\" || this.state.compareMode)) {\n      const sortingActivated = !this.state.sortingActivated;\n      this.setState({ sortingActivated });\n\n      if (!this.state.compareMode) {\n        const algo = this.state.algoChosen;\n        const bars = document.getElementsByClassName(\"bar\");\n        const action =\n          algo === \"Selection Sort\"\n            ? selectionSort\n            : algo === \"Insertion Sort\"\n            ? insertionSort\n            : algo === \"Bubble Sort\"\n            ? bubbleSort\n            : algo === \"Merge Sort\"\n            ? mergeSort\n            : algo === \"Quick Sort\"\n            ? quickSort\n            : null;\n\n        const result = action(this.state.lists[0]);\n\n        if (algo === \"Quick Sort\") {\n          this.animateSort(\n            result[0],\n            bars,\n            algo,\n            this.state.compareMode,\n            0,\n            [],\n            result[1],\n            result[2],\n            [],\n            result[3],\n            result[4],\n            result[5],\n            result[6]\n          );\n        } else if (algo === \"Merge Sort\") {\n          this.animateSort(\n            result[0],\n            bars,\n            algo,\n            this.state.compareMode,\n            0,\n            result[1],\n            result[2],\n            result[3],\n            result[4]\n          );\n        } else {\n          this.animateSort(\n            result[0],\n            bars,\n            algo,\n            this.state.compareMode,\n            0,\n            result[1],\n            result[2],\n            result[3]\n          );\n        }\n      } else {\n        const algo = [\n          insertionSort,\n          selectionSort,\n          bubbleSort,\n          mergeSort,\n          quickSort\n        ];\n        const algoName = [\n          \"Insertion Sort\",\n          \"Selection Sort\",\n          \"Bubble Sort\",\n          \"Merge Sort\",\n          \"Quick Sort\"\n        ];\n        algo.forEach((action, index) => {\n          const bars = document.getElementsByClassName(\"bar\" + index);\n          const result = action(this.state.lists[index]);\n\n          if (index === 4) {\n            this.animateSort(\n              result[0],\n              bars,\n              algoName[index],\n              this.state.compareMode,\n              index,\n              [],\n              result[1],\n              result[2],\n              [],\n              result[3],\n              result[4],\n              result[5],\n              result[6]\n            );\n          } else if (index === 3) {\n            this.animateSort(\n              result[0],\n              bars,\n              algoName[index],\n              this.state.compareMode,\n              index,\n              result[1],\n              result[2],\n              result[3],\n              result[4]\n            );\n          } else {\n            this.animateSort(\n              result[0],\n              bars,\n              algoName[index],\n              this.state.compareMode,\n              index,\n              result[1],\n              result[2],\n              result[3]\n            );\n          }\n        });\n      }\n    }\n  };\n\n  animateSort = (\n    list,\n    bars,\n    algo,\n    compareMode,\n    index,\n    comparisons,\n    swaps,\n    sorted,\n    divisions,\n    small,\n    large,\n    normal,\n    pivots\n  ) => {\n    let iteration;\n    const speed = this.state.speed;\n    const size = this.state.size;\n    const action =\n      algo === \"Selection Sort\"\n        ? animateSelectionSort\n        : algo === \"Bubble Sort\"\n        ? animateBubbleSort\n        : algo === \"Insertion Sort\"\n        ? animateInsertionSort\n        : algo === \"Merge Sort\"\n        ? animateMergeSort\n        : algo === \"Quick Sort\"\n        ? animateQuickSort\n        : null;\n   \n    if (algo === \"Quick Sort\")\n      iteration = action(\n        bars,\n        algo,\n        compareMode,\n        swaps,\n        sorted,\n        small,\n        large,\n        normal,\n        pivots,\n        speed,\n        size\n      );\n    else if (algo === \"Merge Sort\")\n      iteration = action(\n        bars,\n        algo,\n        compareMode,\n        comparisons,\n        swaps,\n        sorted,\n        divisions,\n        speed,\n        size\n      );\n    else\n      iteration = action(\n        bars,\n        algo,\n        compareMode,\n        comparisons,\n        swaps,\n        sorted,\n        speed,\n        size\n      );\n    \n    setTimeout(() => {\n      if (!compareMode || algo === \"Bubble Sort\"){\n        const sortingActivated = !this.state.sortingActivated;\n        this.setState({ sortingActivated });\n        this.setList(list);\n      }\n    }, (iteration * speed) + 10);\n  \n  };\n\n  render() {\n    const { lists, algoChosen, sortingActivated, compareMode } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar\n          algoChosen={algoChosen}\n          sortingActivated={sortingActivated}\n          generateList={this.generateList}\n          handleSliderMousedown={this.handleSliderMousedown}\n          handleAlgoDropdown={this.handleAlgoDropdown}\n          sort={this.sort}\n          handleArrayOrder={this.handleArrayOrder}\n          handleArraySize={this.handleArraySize}\n          compareMode={compareMode}\n          handleCompareMode={this.handleCompareMode}\n        ></NavBar>\n        <div className={`outermost-container ${compareMode ? \"compare\" : \"\"}`}>\n          {lists.map((list, row) => (\n            <div className=\"bar-container\" style={{border: compareMode ? \"1px solid black\" : \"\"}}>\n              {list.map((item, index) => (\n                <Bar\n                  key={index}\n                  value={item[0]}\n                  id={index}\n                  size={this.state.size}\n                  row={row}\n                  compareMode={compareMode}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SortingAlgoVisualizer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SortingAlgoVisualizer from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SortingAlgoVisualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}